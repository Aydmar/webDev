{
  "version": 3,
  "pages404": true,
  "caseSensitive": false,
  "basePath": "",
  "redirects": [
    {
      "source": "/:path+/",
      "destination": "/:path+",
      "internal": true,
      "statusCode": 308,
      "regex": "^(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))/$"
    }
  ],
  "headers": [],
  "dynamicRoutes": [],
  "staticRoutes": [
    {
      "page": "/",
      "regex": "^/(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/(?:/)?$"
    },
    {
      "page": "/_not-found",
      "regex": "^/_not\\-found(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/_not\\-found(?:/)?$"
    },
    {
      "page": "/about",
      "regex": "^/about(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/about(?:/)?$"
    },
    {
      "page": "/blog/detail",
      "regex": "^/blog/detail(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/blog/detail(?:/)?$"
    },
    {
      "page": "/blog/grid",
      "regex": "^/blog/grid(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/blog/grid(?:/)?$"
    },
    {
      "page": "/blog/sidebar",
      "regex": "^/blog/sidebar(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/blog/sidebar(?:/)?$"
    },
    {
      "page": "/contact",
      "regex": "^/contact(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/contact(?:/)?$"
    },
    {
      "page": "/error",
      "regex": "^/error(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/error(?:/)?$"
    },
    {
      "page": "/favicon.ico",
      "regex": "^/favicon\\.ico(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/favicon\\.ico(?:/)?$"
    },
    {
      "page": "/home2",
      "regex": "^/home2(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/home2(?:/)?$"
    },
    {
      "page": "/legal",
      "regex": "^/legal(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/legal(?:/)?$"
    },
    {
      "page": "/legal/privacy-policy",
      "regex": "^/legal/privacy\\-policy(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/legal/privacy\\-policy(?:/)?$"
    },
    {
      "page": "/legal/terms",
      "regex": "^/legal/terms(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/legal/terms(?:/)?$"
    },
    {
      "page": "/project/detail",
      "regex": "^/project/detail(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/project/detail(?:/)?$"
    },
    {
      "page": "/project/template1",
      "regex": "^/project/template1(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/project/template1(?:/)?$"
    },
    {
      "page": "/project/template2",
      "regex": "^/project/template2(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/project/template2(?:/)?$"
    },
    {
      "page": "/service",
      "regex": "^/service(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/service(?:/)?$"
    },
    {
      "page": "/service/sil-property",
      "regex": "^/service/sil\\-property(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/service/sil\\-property(?:/)?$"
    },
    {
      "page": "/service/sil-service",
      "regex": "^/service/sil\\-service(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/service/sil\\-service(?:/)?$"
    },
    {
      "page": "/service/template1",
      "regex": "^/service/template1(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/service/template1(?:/)?$"
    },
    {
      "page": "/service/template2",
      "regex": "^/service/template2(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/service/template2(?:/)?$"
    }
  ],
  "dataRoutes": [],
  "rsc": {
    "header": "RSC",
    "varyHeader": "RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Router-Segment-Prefetch",
    "prefetchHeader": "Next-Router-Prefetch",
    "didPostponeHeader": "x-nextjs-postponed",
    "contentTypeHeader": "text/x-component",
    "suffix": ".rsc",
    "prefetchSuffix": ".prefetch.rsc",
    "prefetchSegmentHeader": "Next-Router-Segment-Prefetch",
    "prefetchSegmentSuffix": ".segment.rsc",
    "prefetchSegmentDirSuffix": ".segments"
  },
  "rewriteHeaders": {
    "pathHeader": "x-nextjs-rewritten-path",
    "queryHeader": "x-nextjs-rewritten-query"
  },
  "rewrites": []
}